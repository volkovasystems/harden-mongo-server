#!/usr/bin/env bash
# MongoDB Server Hardening Tool - VPN Module (1.0.0 MVP)
# Handles OpenVPN installation, configuration, and hardening

# Prevent multiple inclusion
if [[ -n "${_HARDEN_MONGO_SERVER_VPN_LOADED:-}" ]]; then
    return 0
fi
readonly _HARDEN_MONGO_SERVER_VPN_LOADED=1

# ================================
# VPN Constants
# ================================

readonly VPN_CONFIG_DIR="/etc/openvpn/server"
readonly VPN_CLIENT_CONFIG_DIR="/etc/openvpn/client"
readonly VPN_LOG_DIR="/var/log/openvpn"
readonly VPN_STATUS_LOG="/var/log/openvpn/openvpn-status.log"
readonly VPN_LOCK_WATCHER_SERVICE="harden-mongo-server-vpn-lock-watcher.service"

# ================================
# VPN Installation Functions
# ================================

# Install OpenVPN server
install_openvpn() {
    local os
    os=$(get_os)
    
    info "Installing OpenVPN server..."
    
    case "$os" in
        ubuntu|debian)
            apt-get update -qq
            apt-get install -y openvpn iptables-persistent
            ;;
        centos|rhel|fedora)
            if command_exists dnf; then
                dnf install -y openvpn iptables-services
            else
                yum install -y openvpn iptables-services
            fi
            systemctl enable iptables
            ;;
        *)
            error "Unsupported operating system for OpenVPN installation: $os"
            return 1
            ;;
    esac
    
    if ! command_exists openvpn; then
        error "OpenVPN installation failed"
        return 1
    fi
    
    success "OpenVPN installed successfully"
}

# ================================
# VPN Configuration Functions
# ================================

# Configure OpenVPN server with hardening
configure_openvpn_server() {
    info "Configuring OpenVPN server with security hardening..."
    
    # Create required directories
    create_dir_safe "$VPN_CONFIG_DIR" 700 root:root
    create_dir_safe "$VPN_LOG_DIR" 755 root:root
    
    # Generate VPN server configuration
    local vpn_network
    vpn_network=$(get_config_value "openvpn.network")
    local vpn_port
    vpn_port=$(get_config_value "openvpn.port")
    local vpn_proto
    vpn_proto=$(get_config_value "openvpn.proto")
    
    # Create server configuration with hardening
    cat > "$VPN_CONFIG_DIR/server.conf" << EOF
# OpenVPN Server Configuration
# Generated by MongoDB Server Hardening Tool 1.0.0
# Security hardening enabled by default

# Network Settings
port $vpn_port
proto $vpn_proto
dev tun
topology subnet
server $(echo "$vpn_network" | cut -d'/' -f1) 255.255.255.0

# Certificate and Key Files
ca ca.crt
cert server.crt
key server.key
dh none
tls-crypt ta.key

# Security Hardening
cipher AES-256-GCM
auth SHA256
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384
ecdh-curve prime256v1

# Disable compression (security best practice)
comp-lzo no

# Connection Settings
keepalive 10 120
persist-key
persist-tun
user openvpn
group openvpn

# Logging
status $VPN_STATUS_LOG
log-append /var/log/openvpn/server.log
verb 3
mute 10

# Client Configuration Directory (for certificate revocation)
client-config-dir $VPN_CONFIG_DIR/ccd

# Push routes and DNS (VPN network only)
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 1.1.1.1"
push "dhcp-option DNS 1.0.0.1"

# Security: Do not allow clients to see each other (default behavior)
# (client-to-client is intentionally omitted)

# Prevent duplicate common names (enforced by unique certs per human)
# (duplicate-cn is intentionally omitted)

# Script security
script-security 2

# Connection limiting
max-clients 10
EOF
    
    # Set proper permissions
    chmod 600 "$VPN_CONFIG_DIR/server.conf"
    chown root:root "$VPN_CONFIG_DIR/server.conf"
    
    success "OpenVPN server configuration created"
}

# Generate VPN certificates using the SSL module
generate_vpn_certificates() {
    info "Generating VPN certificates..."
    
    # Generate CA for VPN (separate from MongoDB CA)
    if ! generate_vpn_ca; then
        error "Failed to generate VPN CA"
        return 1
    fi
    
    # Generate server certificate
    if ! generate_vpn_server_cert; then
        error "Failed to generate VPN server certificate"
        return 1
    fi
    
    # Generate tls-crypt key
    if ! openvpn --genkey --secret "$VPN_CONFIG_DIR/ta.key"; then
        error "Failed to generate tls-crypt key"
        return 1
    fi
    
    # Generate client certificates for admin and viewer
    if ! generate_vpn_client_cert "admin"; then
        error "Failed to generate admin VPN certificate"
        return 1
    fi
    
    if ! generate_vpn_client_cert "viewer"; then
        error "Failed to generate viewer VPN certificate"
        return 1
    fi
    
    # Set proper permissions on all VPN certificates
    chown -R root:root "$VPN_CONFIG_DIR"
    find "$VPN_CONFIG_DIR" -type f -name "*.key" -exec chmod 600 {} \\;
    find "$VPN_CONFIG_DIR" -type f -name "*.crt" -exec chmod 644 {} \\;
    
    success "VPN certificates generated"
}

# Generate VPN CA certificate
generate_vpn_ca() {
    local ca_key="$VPN_CONFIG_DIR/ca.key"
    local ca_crt="$VPN_CONFIG_DIR/ca.crt"
    
    # Generate CA private key
    openssl genrsa -out "$ca_key" 4096
    
    # Generate CA certificate
    openssl req -new -x509 -days 3650 -key "$ca_key" -out "$ca_crt" -subj "/C=US/ST=Unknown/L=Unknown/O=HMS-VPN-CA/CN=VPN-CA"
    
    chmod 600 "$ca_key"
    chmod 644 "$ca_crt"
}

# Generate VPN server certificate
generate_vpn_server_cert() {
    local server_key="$VPN_CONFIG_DIR/server.key"
    local server_csr="$VPN_CONFIG_DIR/server.csr"
    local server_crt="$VPN_CONFIG_DIR/server.crt"
    local ca_key="$VPN_CONFIG_DIR/ca.key"
    local ca_crt="$VPN_CONFIG_DIR/ca.crt"
    
    # Generate server private key
    openssl genrsa -out "$server_key" 2048
    
    # Generate certificate signing request
    openssl req -new -key "$server_key" -out "$server_csr" -subj "/C=US/ST=Unknown/L=Unknown/O=HMS-VPN/CN=vpn-server"
    
    # Sign server certificate
    openssl x509 -req -in "$server_csr" -CA "$ca_crt" -CAkey "$ca_key" -CAcreateserial -out "$server_crt" -days 365
    
    # Clean up CSR
    rm -f "$server_csr"
    
    chmod 600 "$server_key"
    chmod 644 "$server_crt"
}

# Generate VPN client certificate
generate_vpn_client_cert() {
    local client_name="$1"
    local client_key="$VPN_CONFIG_DIR/${client_name}.key"
    local client_csr="$VPN_CONFIG_DIR/${client_name}.csr"
    local client_crt="$VPN_CONFIG_DIR/${client_name}.crt"
    local ca_key="$VPN_CONFIG_DIR/ca.key"
    local ca_crt="$VPN_CONFIG_DIR/ca.crt"
    
    # Generate client private key
    openssl genrsa -out "$client_key" 2048
    
    # Generate certificate signing request
    openssl req -new -key "$client_key" -out "$client_csr" -subj "/C=US/ST=Unknown/L=Unknown/O=HMS-VPN/CN=${client_name}"
    
    # Sign client certificate
    openssl x509 -req -in "$client_csr" -CA "$ca_crt" -CAkey "$ca_key" -CAcreateserial -out "$client_crt" -days 365
    
    # Clean up CSR
    rm -f "$client_csr"
    
    chmod 600 "$client_key"
    chmod 644 "$client_crt"
}

# ================================
# VPN Service Management
# ================================

# Enable and start OpenVPN service
enable_openvpn_service() {
    info "Enabling OpenVPN service..."
    
    # Enable OpenVPN server service
    systemctl enable openvpn-server@server.service
    
    # Start the service
    if systemctl start openvpn-server@server.service; then
        success "OpenVPN service started"
    else
        error "Failed to start OpenVPN service"
        return 1
    fi
    
    # Verify service is running
    if ! systemctl is-active --quiet openvpn-server@server.service; then
        error "OpenVPN service is not running"
        return 1
    fi
    
    info "OpenVPN service is running and enabled for boot"
}

# Get VPN network interface name
get_vpn_interface() {
    # Usually tun0 for OpenVPN
    ip link show | grep -o "tun[0-9]*" | head -n1 || echo "tun0"
}

# Get VPN network CIDR
get_vpn_network() {
    get_config_value "openvpn.network"
}

# ================================
# VPN Auto-lock Functions
# ================================

# Set up VPN lock watcher service
setup_vpn_lock_watcher() {
    if ! get_config_value "autoLockToVpnOnFirstRun" | grep -q "true"; then
        info "Auto-lock to VPN disabled in configuration"
        return 0
    fi
    
    info "Setting up VPN auto-lock watcher..."
    
    # Create the watcher script
    create_vpn_lock_watcher_script
    
    # Create systemd service
    create_vpn_lock_watcher_service
    
    # Enable and start the watcher
    systemctl enable "$VPN_LOCK_WATCHER_SERVICE"
    systemctl start "$VPN_LOCK_WATCHER_SERVICE"
    
    success "VPN auto-lock watcher configured"
}

# Create the VPN lock watcher script
create_vpn_lock_watcher_script() {
    local watcher_script="/usr/local/bin/vpn-lock-watcher.sh"
    
    cat > "$watcher_script" << 'EOF'
#!/bin/bash
# VPN Lock Watcher - Auto-lock SSH and MongoDB to VPN after first successful VPN SSH login
# Part of MongoDB Server Hardening Tool 1.0.0

LOG_FILE="/var/log/harden-mongo-server/vpn-lock-watcher.log"
VPN_NETWORK="10.8.0.0/24"
LOCK_APPLIED_FILE="/var/lib/harden-mongo-server/vpn-lock-applied"

log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" >> "$LOG_FILE"
}

# Check if lock has already been applied
if [[ -f "$LOCK_APPLIED_FILE" ]]; then
    log_message "VPN lock already applied, disabling watcher"
    systemctl disable harden-mongo-server-vpn-lock-watcher.service
    exit 0
fi

log_message "VPN lock watcher started"

# Monitor auth.log for successful SSH logins from VPN network
tail -F /var/log/auth.log | while read -r line; do
    if echo "$line" | grep -q "sshd.*Accepted.*from 10.8."; then
        log_message "Detected successful SSH login from VPN network: $line"
        
        # Apply VPN-only restrictions
        log_message "Applying VPN-only restrictions..."
        
        # Lock SSH to VPN network only
        if ! grep -q "ListenAddress 10.8.0.1" /etc/ssh/sshd_config; then
            echo "ListenAddress 10.8.0.1" >> /etc/ssh/sshd_config
            systemctl reload ssh
            log_message "SSH locked to VPN network"
        fi
        
        # Update firewall to enforce VPN-only for MongoDB and SSH
        /usr/local/bin/harden-mongo-server-apply-vpn-lock
        
        # Mark lock as applied
        mkdir -p "$(dirname "$LOCK_APPLIED_FILE")"
        touch "$LOCK_APPLIED_FILE"
        
        log_message "VPN lock applied successfully, disabling watcher"
        systemctl disable harden-mongo-server-vpn-lock-watcher.service
        break
    fi
done
EOF
    
    chmod 755 "$watcher_script"
    chown root:root "$watcher_script"
}

# Create systemd service for VPN lock watcher
create_vpn_lock_watcher_service() {
    cat > "/etc/systemd/system/$VPN_LOCK_WATCHER_SERVICE" << EOF
[Unit]
Description=VPN Lock Watcher - Auto-lock to VPN after first SSH over VPN
After=network.target openvpn-server@server.service
Wants=openvpn-server@server.service

[Service]
Type=simple
ExecStart=/usr/local/bin/vpn-lock-watcher.sh
Restart=on-failure
RestartSec=5
User=root
Group=root

# Security hardening
NoNewPrivileges=true
PrivateTmp=true
ProtectHome=true
ProtectSystem=strict
ReadWritePaths=/var/log/harden-mongo-server /var/lib/harden-mongo-server /etc/ssh

[Install]
WantedBy=multi-user.target
EOF
    
    systemctl daemon-reload
}

# Create VPN lock application script
create_vpn_lock_application_script() {
    local lock_script="/usr/local/bin/harden-mongo-server-apply-vpn-lock"
    
    cat > "$lock_script" << 'EOF'
#!/bin/bash
# Apply VPN-only firewall restrictions
# Part of MongoDB Server Hardening Tool 1.0.0

# Update iptables to allow MongoDB and SSH only from VPN network
iptables -D INPUT -p tcp --dport 27017 -j ACCEPT 2>/dev/null || true
iptables -D INPUT -p tcp --dport 22 -j ACCEPT 2>/dev/null || true

# Allow from VPN network only
iptables -I INPUT -s 10.8.0.0/24 -p tcp --dport 27017 -j ACCEPT
iptables -I INPUT -s 10.8.0.0/24 -p tcp --dport 22 -j ACCEPT
iptables -I INPUT -s 127.0.0.1 -p tcp --dport 27017 -j ACCEPT

# Drop everything else for these ports
iptables -A INPUT -p tcp --dport 27017 -j DROP
iptables -A INPUT -p tcp --dport 22 -j DROP

# Save iptables rules
iptables-save > /etc/iptables/rules.v4

echo "VPN-only restrictions applied for MongoDB (27017) and SSH (22)"
EOF
    
    chmod 755 "$lock_script"
    chown root:root "$lock_script"
}

# ================================
# VPN Status and Management
# ================================

# Check VPN service status
check_vpn_status() {
    local status="unknown"
    
    if systemctl is-active --quiet openvpn-server@server.service; then
        status="running"
    elif systemctl is-enabled --quiet openvpn-server@server.service; then
        status="stopped"
    else
        status="disabled"
    fi
    
    echo "$status"
}

# Get connected VPN clients
get_connected_vpn_clients() {
    if [[ -f "$VPN_STATUS_LOG" ]]; then
        awk '/CLIENT_LIST/ {print $2}' "$VPN_STATUS_LOG" 2>/dev/null || echo "No clients"
    else
        echo "Status log not found"
    fi
}

# ================================
# Main VPN Setup Function
# ================================

# Execute VPN setup phase
execute_vpn_phase() {
    info "Starting VPN setup phase..."
    
    # Check if VPN is enabled in configuration
    if ! get_config_value "openvpn.enabled" | grep -q "true"; then
        info "OpenVPN disabled in configuration, skipping VPN setup"
        return 0
    fi
    
    # Install OpenVPN if not present
    if ! command_exists openvpn; then
        install_openvpn
    fi
    
    # Configure OpenVPN server
    configure_openvpn_server
    
    # Generate VPN certificates
    generate_vpn_certificates
    
    # Configure firewall for VPN
    configure_vpn_firewall
    
    # Enable OpenVPN service
    enable_openvpn_service
    
    # Set up VPN lock watcher
    setup_vpn_lock_watcher
    
    # Create VPN lock application script
    create_vpn_lock_application_script
    
    success "VPN setup phase completed"
}

# Configure firewall for VPN traffic
configure_vpn_firewall() {
    info "Configuring firewall for VPN traffic..."
    
    local vpn_port
    vpn_port=$(get_config_value "openvpn.port")
    local vpn_proto
    vpn_proto=$(get_config_value "openvpn.proto")
    local vpn_cidr
    vpn_cidr=$(get_config_value "openvpn.network")
    local public_if
    public_if=$(get_public_interface)
    
    # Allow VPN port (needed for initial connection on public interface)
    iptables -A INPUT -p "$vpn_proto" --dport "$vpn_port" -j ACCEPT
    
    # Enable IP forwarding
    echo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/99-openvpn.conf
    sysctl -p /etc/sysctl.d/99-openvpn.conf
    
    # Set up NAT for VPN clients
    if [[ -n "$public_if" ]]; then
        iptables -t nat -A POSTROUTING -s "$vpn_cidr" -o "$public_if" -j MASQUERADE
        iptables -A FORWARD -i tun+ -j ACCEPT
        iptables -A FORWARD -i tun+ -o "$public_if" -m state --state RELATED,ESTABLISHED -j ACCEPT
        iptables -A FORWARD -i "$public_if" -o tun+ -m state --state RELATED,ESTABLISHED -j ACCEPT
    fi
    
    # Save firewall rules
    if command_exists iptables-save; then
        iptables-save > /etc/iptables/rules.v4
    fi
    
    success "VPN firewall configured"
}

# ================================
# Module Information
# ================================

vpn_module_info() {
    cat << EOF
MongoDB Server Hardening VPN Module v$HARDEN_MONGO_SERVER_VERSION

This module provides:
- OpenVPN server installation and hardened configuration
- VPN certificate generation and management
- Auto-lock functionality for VPN-only access
- VPN client profile generation for admin and viewer roles

Security features:
- AES-256-GCM encryption with SHA256 authentication
- TLS 1.2 minimum version enforcement
- tls-crypt for additional security
- Automatic VPN-only lock after first successful VPN SSH

Dependencies: openvpn, iptables
EOF
}

# Validate VPN requirements
validate_vpn_requirements() {
    local errors=0
    
    # Check required commands
    local required_commands=(openvpn iptables openssl)
    for cmd in "${required_commands[@]}"; do
        if ! command_exists "$cmd"; then
            echo "Error: Required command '$cmd' not found for VPN setup" >&2
            ((errors++))
        fi
    done
    
    # Check for TUN support
    if [[ ! -e /dev/net/tun ]]; then
        echo "Error: TUN/TAP support not available" >&2
        ((errors++))
    fi
    
    return $errors
}