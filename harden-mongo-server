#!/usr/bin/env bash
# MongoDB Server Hardening Tool - Main Script
# A tool to harden MongoDB servers with comprehensive security and maintenance features

# Script metadata
readonly SCRIPT_NAME="harden-mongo-server"
readonly SCRIPT_VERSION="$( { if [[ -f "$SCRIPT_DIR/VERSION" ]]; then sed -n '1p' "$SCRIPT_DIR/VERSION"; elif [[ -f "$LIB_DIR/VERSION" ]]; then sed -n '1p' "$LIB_DIR/VERSION"; elif [[ -f "/usr/local/lib/harden-mongo-server/VERSION" ]]; then sed -n '1p' "/usr/local/lib/harden-mongo-server/VERSION"; elif [[ -f "/usr/lib/harden-mongo-server/VERSION" ]]; then sed -n '1p' "/usr/lib/harden-mongo-server/VERSION"; else echo "0.0.0"; fi; } 2>/dev/null)"
readonly SCRIPT_DESCRIPTION="MongoDB Server Hardening Tool"
readonly SCRIPT_AUTHOR="harden-mongo-server project"

# Get script directory
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly LIB_DIR="$SCRIPT_DIR/lib/harden-mongo-server"

# ================================
# Core Module Loading
# ================================

# Load core libraries in dependency order
load_core_modules() {
    local modules=(
        "core"
        "logging"
        "system"
        "failsafe"
        "mongodb"
        "ssl"
        "firewall"
        "backup"
        "onboarding"
        "vpn"
    )
    
    for module in "${modules[@]}"; do
        local module_path="$LIB_DIR/${module}.sh"
        if [[ -f "$module_path" ]]; then
            source "$module_path" || {
                echo "Error: Failed to load module '$module'" >&2
                exit 1
            }
        else
            echo "Error: Module '$module' not found at '$module_path'" >&2
            exit 1
        fi
    done
}

# Initialize the application
initialize_application() {
    # Load all modules
    load_core_modules
    
    # Set up signal handlers
    setup_signal_handlers
    
    # Check if running as root for operations that require it
    if [[ "$1" != "help" && "$1" != "version" && "$1" != "info" ]]; then
        if ! is_root; then
            error "This script must be run as root for most operations"
            info "Use 'sudo $0 $*' or run as root user"
            exit 1
        fi
    fi
}

# ================================
# Command Line Interface
# ================================

# Display help information
show_help() {
    cat << EOF
$SCRIPT_DESCRIPTION - 1.0.0 MVP

Usage: $0 [OPTIONS]

DESCRIPTION:
  A single command that hardens a MongoDB server securely with minimal input.
  Private-only by default. No public domain required. Safe to re-run anytime.
  Automated onboarding via Cloudflare Quick Tunnel (one-liner download, no manual steps).

WHAT IT DOES:
  - TLS required with a private Certificate Authority (CA)
  - x509-only authentication (passwords disabled)
  - Role separation: Root, Admin (ops), App (business), Backup (service)
  - VPN-only access by default; OpenVPN installed and configured
  - Automatic security for new business databases (just-in-time grants)
  - Encrypted backups: local-only, scheduled daily
  - Automated monthly certificate rotation with zero downtime
  - Auto-lock to VPN after first successful SSH over VPN

OPTIONS:
  --config PATH                          Set alternate config path for this run
  --dry-run                              Show planned changes only
  --allow-ip-add IP                      Allow one IP to access MongoDB
  --allow-ip-remove IP                   Remove one IP from access list
  --restore PATH                         Restore from a backup archive
  -h, --help                             Show this help message
      --version                          Show version information

EXAMPLES:
  # First run (bootstrap everything)
  sudo $0

  # Allow a specific IP to access MongoDB
  sudo $0 --allow-ip-add 192.168.1.100

  # Remove IP access
  sudo $0 --allow-ip-remove 192.168.1.100

  # Check what changes would be made
  sudo $0 --dry-run

  # Restore from backup
  sudo $0 --restore /var/backups/harden-mongo-server/backup-2024-01-01.zip

FIRST RUN:
  On first run, the tool sets up everything and prints a one-liner command to
  download all certificates (admin/viewer VPN profiles and DB certs).
  Copy-paste that one-liner on your client machine to download everything you need.

NOTES:
  - First run requires root to bootstrap; later runs allowed for users in harden-mongo-server-admins group
  - No cloud credentials required at any time
  - For bulk IP changes, edit the config file at /etc/harden-mongo-server/config.json
  - Tool is idempotent: reruns safely reconcile to the desired secure state

EOF
}

# Show version information
show_version() {
    echo "$SCRIPT_DESCRIPTION"
    echo "Version: $SCRIPT_VERSION"
    echo "Author: $SCRIPT_AUTHOR"
    echo
    
    # Only show extended info if modules are loaded
if [[ -n "${_HARDEN_MONGO_SERVER_CORE_LOADED:-}" ]]; then
        echo "Library Versions:"
echo "  Core: v$HARDEN_MONGO_SERVER_VERSION"
        if command -v get_mongodb_version >/dev/null 2>&1; then
            echo "  MongoDB: $(get_mongodb_version 2>/dev/null || echo 'Not detected')"
        fi
        if command -v get_os >/dev/null 2>&1; then
            echo "  System: $(get_os 2>/dev/null || echo 'unknown') $(get_os_version 2>/dev/null || echo 'unknown')"
        fi
    fi
}

# Show module information
show_info() {
    local module="${1:-all}"
    
    case "$module" in
        all)
print_header "MongoDB Server Hardening Tool - Module Information"
            core_module_info 2>/dev/null || echo "Core module info not available"
            echo
            logging_module_info 2>/dev/null || echo "Logging module info not available"
            echo
            system_module_info 2>/dev/null || echo "System module info not available"
            echo
            ssl_module_info 2>/dev/null || echo "SSL module info not available"
            echo
            mongodb_module_info 2>/dev/null || echo "MongoDB module info not available"
            echo
            firewall_module_info 2>/dev/null || echo "Firewall module info not available"
            echo
            backup_module_info 2>/dev/null || echo "Backup module info not available"
            echo
            onboarding_module_info 2>/dev/null || echo "Onboarding module info not available"
            echo
            vpn_module_info 2>/dev/null || echo "VPN module info not available"
            ;;
        core) core_module_info ;;
        logging) logging_module_info ;;
        system) system_module_info ;;
        mongodb) mongodb_module_info ;;
        ssl) ssl_module_info ;;
        firewall) firewall_module_info ;;
        backup) backup_module_info ;;
        onboarding) onboarding_module_info ;;
        vpn) vpn_module_info ;;
        *)
            error "Unknown module: $module"
            echo "Available modules: all, core, logging, system, mongodb, ssl, firewall, backup, onboarding, vpn"
            return 1
            ;;
    esac
}

# ================================
# Command Handlers
# ================================












# ================================
# 1.0.0 MVP Operation Handlers  
# ================================

# Handle main hardening operation (default when no flags specified)
handle_main_hardening_operation() {
    info "Starting MongoDB Server Hardening - 1.0.0 MVP"
    
    # Execute hardening phases in order
    local phases=(
        "preflight"
        "bootstrap" 
        "vpn"
        "tls"
        "mongodb-config"
        "provision"
        "firewall"
        "backups"
        "verify"
    )
    
    for phase in "${phases[@]}"; do
        info "Phase: $phase"
        if ! "execute_${phase}_phase"; then
            error "Failed during $phase phase"
            return 1
        fi
    done
    
    success "MongoDB hardening completed successfully"
    
    # Print onboarding information
    print_onboarding_info
}

# Handle restore operation
handle_restore_operation() {
    local restore_path="$HARDEN_MONGO_SERVER_RESTORE_PATH"
    
    if [[ ! -f "$restore_path" ]]; then
        error "Restore file not found: $restore_path"
        return 1
    fi
    
    info "Restoring from backup: $restore_path"
    
    # Only encrypted backups are supported
    if [[ "$restore_path" == *.age ]]; then
        if command -v restore_encrypted_backup >/dev/null 2>&1; then
            restore_encrypted_backup "$restore_path"
        else
            error "Encrypted restore not available"
            return 1
        fi
    else
        error "Unsupported backup format. 1.0.0 supports only age-encrypted backups (*.age)."
        return 1
    fi
    
    if [[ $? -eq 0 ]]; then
        success "Restore completed successfully"
    else
        error "Restore failed"
        return 1
    fi
}

# Handle adding allowed IP
handle_allow_ip_add() {
    local ip="$1"
    
    if ! is_valid_ip "$ip"; then
        error "Invalid IP address: $ip"
        return 1
    fi
    
    info "Adding IP to allowed list: $ip"
    
    if add_allowed_ip "$ip"; then
        success "IP $ip added to allowed list"
        info "Applying firewall changes..."
        apply_firewall_config
    else
        error "Failed to add IP $ip"
        return 1
    fi
}

# Handle removing allowed IP
handle_allow_ip_remove() {
    local ip="$1"
    
    if ! is_valid_ip "$ip"; then
        error "Invalid IP address: $ip"
        return 1
    fi
    
    info "Removing IP from allowed list: $ip"
    
    if remove_allowed_ip "$ip"; then
        success "IP $ip removed from allowed list"
        info "Applying firewall changes..."
        apply_firewall_config
    else
        error "Failed to remove IP $ip"
        return 1
    fi
}

# Print onboarding information after successful hardening
print_onboarding_info() {
    echo
    print_header "Onboarding Information"
    
    echo "Your MongoDB server has been successfully hardened!"
    echo
    echo "To download all certificates and VPN profiles, run this command on your client machine:"
    echo
    
    # Generate onboarding script
    if command -v generate_onboarding_script >/dev/null 2>&1; then
        generate_onboarding_script
    else
        echo "# One-liner download command will be generated here"
        echo "# after the onboarding module is implemented"
    fi
    
    echo
    echo "Files included in the download:"
    echo "  - admin-YYYY-MM-DD.ovpn      (Admin VPN profile)"
    echo "  - viewer-YYYY-MM-DD.ovpn     (Viewer VPN profile)"
    echo "  - db-root-YYYY-MM-DD.pem     (Root database client cert)"
    echo "  - db-admin-YYYY-MM-DD.pem    (Admin database client cert)"
    echo "  - db-app-YYYY-MM-DD.pem      (App database client cert)"
    echo "  - db-backup-YYYY-MM-DD.pem   (Backup database client cert)"
    echo "  - db-ca-YYYY-MM-DD.pem       (Database CA certificate)"
    echo
    echo "Next steps:"
    echo "1. Run the download command above on your client machine"
    echo "2. Import the appropriate VPN profile (admin or viewer)"
    echo "3. Connect to the VPN before accessing MongoDB"
    echo "4. Use the database client certificates for MongoDB connections"
    echo
}

# ================================
# Phase Execution Functions (1.0.0 MVP)
# ================================

# Execute preflight checks phase
execute_preflight_phase() {
    info "Starting preflight checks phase..."
    
    # Check system requirements
    if ! validate_core_requirements; then
        error "Core system requirements not met"
        return 1
    fi

    # Check MongoDB requirements
    if command -v validate_mongodb_requirements >/dev/null 2>&1; then
        if ! validate_mongodb_requirements; then
            error "MongoDB requirements not met"
            return 1
        fi
    fi
    
    # Check VPN requirements if enabled
    if get_config_value "openvpn.enabled" | grep -q "true"; then
        if ! validate_vpn_requirements; then
            error "VPN requirements not met"
            return 1
        fi
    fi
    
    # Check for existing MongoDB instance and create initial backup
    if systemctl is-active --quiet mongod; then
        info "Existing MongoDB instance detected, creating initial backup..."
        if ! create_initial_backup; then
            error "Failed to create initial backup - aborting for safety"
            return 1
        fi
    fi
    
    success "Preflight checks phase completed"
}

# Execute bootstrap phase
execute_bootstrap_phase() {
    info "Starting bootstrap phase..."
    
    # Initialize configuration if needed
    init_config
    
    # Create required system directories
    create_dir_safe "$HARDEN_MONGO_SERVER_CONF_DIR" 755 root:root
    create_dir_safe "$HARDEN_MONGO_SERVER_KEYS_DIR" 700 root:root
    create_dir_safe "$HARDEN_MONGO_SERVER_BACKUP_DIR" 750 root:root
    create_dir_safe "$HARDEN_MONGO_SERVER_LOG_DIR" 755 root:root
    create_dir_safe "$HARDEN_MONGO_SERVER_VAR_DIR" 755 root:root
    
    # Create system users and groups
    create_system_users
    
    # Set up basic system hardening
    apply_basic_system_hardening
    
    success "Bootstrap phase completed"
}

# Execute backup setup phase
execute_backups_phase() {
    info "Starting backup setup phase..."
    
    # Set up backup system
    if command -v execute_backup_setup_phase >/dev/null 2>&1; then
        execute_backup_setup_phase
    else
        info "Using basic backup configuration"
        # Basic backup directory setup is already done in bootstrap
    fi
    
    success "Backup setup phase completed"
}

# Execute firewall configuration phase
execute_firewall_phase() {
    info "Starting firewall configuration phase..."
    
    # Set up firewall (complete setup with default DROP policy and required allows)
    if command -v setup_complete_firewall >/dev/null 2>&1; then
        setup_complete_firewall
    elif command -v execute_firewall_setup_phase >/dev/null 2>&1; then
        execute_firewall_setup_phase
    else
        info "Using basic firewall configuration"
    fi
    
    success "Firewall configuration phase completed"
}

# Execute verification phase
execute_verify_phase() {
    info "Starting verification phase..."
    
    # Verify MongoDB is running with TLS
    if systemctl is-active --quiet mongod; then
        success "MongoDB service is running"
        
        # Check if TLS is enabled
        if grep -q "requireTLS" "$MONGODB_CONFIG_FILE" 2>/dev/null; then
            success "MongoDB TLS is configured"
        else
            warn "MongoDB TLS configuration not detected"
        fi
    else
        warn "MongoDB service is not running"
    fi
    
    # Verify VPN is running if enabled
    if get_config_value "openvpn.enabled" | grep -q "true"; then
        if systemctl is-active --quiet openvpn-server@server; then
            success "OpenVPN service is running"
        else
            warn "OpenVPN service is not running"
        fi
    fi
    
    # Verify certificates exist
    if [[ -d "/etc/mongoCA/clients" ]]; then
        local cert_count
        cert_count=$(find /etc/mongoCA/clients -name "*.pem" | wc -l)
        if (( cert_count >= 4 )); then
            success "MongoDB client certificates generated ($cert_count found)"
        else
            warn "Insufficient MongoDB client certificates found ($cert_count)"
        fi
    fi
    
    success "Verification phase completed"
}

# Create initial backup before any changes
create_initial_backup() {
    local backup_path
    backup_path="/var/backups/harden-mongo-server/initial-backup-$(date +%Y%m%d_%H%M%S)"
    
    info "Creating initial encrypted backup at: $backup_path"
    
    # Check if backup tools are available
    if ! command_exists mongodump; then
        error "mongodump not available - cannot create initial backup"
        return 1
    fi
    
    # Check available disk space (require at least 1GB free)
    local free_space_gb
    free_space_gb=$(df -BG "$(dirname "$backup_path")" | awk 'NR==2 {gsub(/G/, "", $4); print $4}')
    if (( free_space_gb < 1 )); then
        error "Insufficient disk space for initial backup (need 1GB, have ${free_space_gb}GB)"
        return 1
    fi
    
    # Create the backup (encrypted)
    if command -v create_encrypted_backup >/dev/null 2>&1; then
        create_encrypted_backup "all"
    else
        error "Encrypted backup function not available"
        return 1
    fi
}

# Create system users and groups
create_system_users() {
    info "Creating system users and groups..."
    
    # Create harden-mongo-server-admins group
    if ! getent group harden-mongo-server-admins >/dev/null 2>&1; then
        groupadd harden-mongo-server-admins
        success "Created group: harden-mongo-server-admins"
    fi
    
    # Create hms-admin user
    if ! getent passwd hms-admin >/dev/null 2>&1; then
        useradd -r -g harden-mongo-server-admins -d /var/lib/harden-mongo-server \
                -s /bin/bash -c "HMS Admin User" hms-admin
        success "Created user: hms-admin"
    fi
    
    # Add hms-admin to sudo group for administrative tasks
    if getent group sudo >/dev/null 2>&1; then
        usermod -a -G sudo hms-admin
        info "Added hms-admin to sudo group"
    fi
}

# Apply basic system hardening
apply_basic_system_hardening() {
    info "Applying basic system hardening..."
    
    # Enable unattended security updates
    if command_exists apt-get; then
        # Ubuntu/Debian systems
        if ! dpkg -l | grep -q unattended-upgrades; then
            apt-get update -qq
            apt-get install -y unattended-upgrades
            dpkg-reconfigure -plow unattended-upgrades
            info "Enabled unattended security updates"
        fi
    fi
    
    # Apply minimal security sysctls
    apply_security_sysctls
    
    # Configure SSH security settings
    configure_ssh_security
    
    # Set up log rotation
    setup_log_rotation
    
    success "Basic system hardening applied"
}

# Apply security sysctls
apply_security_sysctls() {
    local sysctl_file="/etc/sysctl.d/99-harden-mongo-server-security.conf"
    
    cat > "$sysctl_file" << 'EOF'
# MongoDB Server Hardening Tool - Security Settings
# Applied by 1.0.0 MVP

# Network security
net.ipv4.tcp_syncookies = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Kernel security
fs.protected_hardlinks = 1
fs.protected_symlinks = 1
kernel.kptr_restrict = 2
kernel.dmesg_restrict = 1
kernel.yama.ptrace_scope = 1
EOF
    
    # Apply the settings
    sysctl -p "$sysctl_file" >/dev/null 2>&1
    info "Security sysctls applied"
}

# Configure SSH security settings
configure_ssh_security() {
    local ssh_config="/etc/ssh/sshd_config"
    local ssh_hardening_file="/etc/ssh/sshd_config.d/99-harden-mongo-server.conf"
    
    # Create SSH hardening configuration
    mkdir -p /etc/ssh/sshd_config.d
    
    cat > "$ssh_hardening_file" << 'EOF'
# MongoDB Server Hardening Tool - SSH Security
# Applied by 1.0.0 MVP

# Disable root login
PermitRootLogin no

# Use only strong ciphers and MACs
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512

# Disable weak authentication methods
PasswordAuthentication no
ChallengeResponseAuthentication no
UsePAM no

# Security settings
X11Forwarding no
AllowTcpForwarding no
AllowAgentForwarding no
PermitTunnel no
GatewayPorts no
PermitUserEnvironment no

# Connection limits
MaxAuthTries 3
MaxSessions 2
ClientAliveInterval 300
ClientAliveCountMax 2
EOF
    
    # Test SSH configuration
    if sshd -t 2>/dev/null; then
        info "SSH security configuration applied"
    else
        warn "SSH configuration test failed, removing hardening file"
        rm -f "$ssh_hardening_file"
    fi
}

# Set up log rotation
setup_log_rotation() {
    # Set up log rotation for MongoDB
    if [[ ! -f /etc/logrotate.d/mongod ]]; then
        cat > /etc/logrotate.d/mongod << 'EOF'
/var/log/mongodb/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 640 mongodb mongodb
    postrotate
        /bin/kill -SIGUSR1 `cat /var/lib/mongodb/mongod.lock 2>/dev/null` 2>/dev/null || true
    endscript
}
EOF
        info "MongoDB log rotation configured"
    fi
    
    # Set up log rotation for harden-mongo-server
    cat > /etc/logrotate.d/harden-mongo-server << 'EOF'
/var/log/harden-mongo-server/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 640 root root
}
EOF
    info "Harden-mongo-server log rotation configured"
}

# ================================
# Option Parsing
# ================================

# Parse command line options
parse_options() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --config)
                export HARDEN_MONGO_SERVER_CONFIG_FILE="$2"
                shift 2
                ;;
            --dry-run)
                export HARDEN_MONGO_SERVER_DRY_RUN=true
                shift
                ;;
            --allow-ip-add)
                export HARDEN_MONGO_SERVER_ALLOW_IP_ADD="$2"
                shift 2
                ;;
            --allow-ip-remove)
                export HARDEN_MONGO_SERVER_ALLOW_IP_REMOVE="$2"
                shift 2
                ;;
            --restore)
                export HARDEN_MONGO_SERVER_RESTORE_PATH="$2"
                shift 2
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            --version)
                show_version
                exit 0
                ;;
            --)
                shift
                break
                ;;
            -*)
                error "Unknown option: $1"
                exit 1
                ;;
            *)
                break
                ;;
        esac
    done
    
    # Return remaining arguments
    echo "$@"
}

# ================================
# Main Function
# ================================

main() {
    # Handle help/version and internal maintenance commands first (before initialization)
    case "${1:-}" in
        -h|--help|help)
            show_help; exit 0 ;;
        --version|version)
            show_version; exit 0 ;;
        generate-certificates)
            # Internal: regenerate certificates for rotation
            load_core_modules
            if command -v generate_required_certificates >/dev/null 2>&1; then
                generate_required_certificates || exit 1
                exit 0
            else
                echo "Certificate generation function not available" >&2
                exit 1
            fi
            ;;
    esac
    
    # Initialize application 
    initialize_application "${1:-}"
    
    # Parse command line options
    local args
    args=$(parse_options "$@")
    eval "set -- $args"
    
    # Handle 1.0.0 MVP single-purpose operation
    if [[ -n "${HARDEN_MONGO_SERVER_RESTORE_PATH:-}" ]]; then
        # Restore operation
        handle_restore_operation
    elif [[ -n "${HARDEN_MONGO_SERVER_ALLOW_IP_ADD:-}" ]]; then
        # Add allowed IP
        handle_allow_ip_add "$HARDEN_MONGO_SERVER_ALLOW_IP_ADD"
    elif [[ -n "${HARDEN_MONGO_SERVER_ALLOW_IP_REMOVE:-}" ]]; then
        # Remove allowed IP
        handle_allow_ip_remove "$HARDEN_MONGO_SERVER_ALLOW_IP_REMOVE"
    else
        # Main hardening operation (default)
        handle_main_hardening_operation
    fi
}

# ================================
# Script Execution
# ================================

# Only run main if this script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi