#!/bin/bash
# =============================================================================
# MongoDB Hardening - MongoDB Management Library Module
# =============================================================================
# This module provides MongoDB-specific functions including:
# - MongoDB installation and version management
# - Service configuration and management
# - Configuration file generation and updates
# - Storage engine migration
# =============================================================================

# Prevent multiple sourcing
if [[ "${_MONGODB_LIB_LOADED:-}" == "true" ]]; then
    return 0
fi
readonly _MONGODB_LIB_LOADED=true

# =============================================================================
# MongoDB Installation
# =============================================================================

# Ensure MongoDB is installed with the correct version
ensure_mongodb_installed() {
    log_and_print "INFO" "Checking MongoDB installation..."
    
    if ! command -v mongod &> /dev/null; then
        log_and_print "WARN" "MongoDB not installed. Installing MongoDB 3.4.24..."
        
        # Install dependencies
        apt-get update -qq
        apt-get install -y -qq gnupg curl lsb-release
        
        # Add MongoDB repository
        curl -fsSL https://www.mongodb.org/static/pgp/server-3.4.asc | gpg --dearmor -o /usr/share/keyrings/mongodb-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/mongodb-archive-keyring.gpg] http://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/3.4 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-3.4.list
        
        # Install MongoDB
        apt-get update -qq
        apt-get install -y mongodb-org=3.4.24 mongodb-org-server=3.4.24 mongodb-org-shell=3.4.24 mongodb-org-mongos=3.4.24 mongodb-org-tools=3.4.24
        
        # Hold packages to prevent automatic updates
        apt-mark hold mongodb-org mongodb-org-server mongodb-org-shell mongodb-org-mongos mongodb-org-tools
        
        log_and_print "FIXED" "MongoDB 3.4.24 installed successfully"
    else
        MONGO_VERSION=$(mongod --version | head -n1 | awk '{print $3}')
        log_and_print "OK" "MongoDB installed: version $MONGO_VERSION"
    fi
}

# =============================================================================
# Service Configuration
# =============================================================================

# Configure MongoDB systemd service
ensure_systemd_service() {
    log_and_print "INFO" "Configuring systemd service..."
    
    local service_file="/etc/systemd/system/mongod.service"
    local service_content='[Unit]
Description=MongoDB Database Server
After=network.target

[Service]
User=mongodb
Group=mongodb
ExecStart=/usr/bin/mongod --config /etc/mongod.conf
PIDFile=/var/run/mongodb/mongod.pid
LimitNOFILE=64000
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target'

    local service_updated=false
    
    if [ ! -f "$service_file" ]; then
        echo "$service_content" > "$service_file"
        service_updated=true
        log_and_print "FIXED" "Created systemd service file"
    else
        # Check if service file needs updating
        if ! grep -q "LimitNOFILE=64000" "$service_file" || ! grep -q "Restart=always" "$service_file"; then
            echo "$service_content" > "$service_file"
            service_updated=true
            log_and_print "FIXED" "Updated systemd service file"
        else
            log_and_print "OK" "Systemd service properly configured"
        fi
    fi
    
    if [ "$service_updated" = true ]; then
        systemctl daemon-reload
    fi
    
    # Enable service
    if ! systemctl is-enabled mongod &>/dev/null; then
        systemctl enable mongod
        log_and_print "FIXED" "Enabled MongoDB service"
    fi
}

# =============================================================================
# Configuration Management
# =============================================================================

# Generate and apply MongoDB configuration with SSL support
ensure_mongodb_config() {
    log_and_print "INFO" "Configuring MongoDB with maximum security settings..."
    
    if [ "${DRY_RUN:-false}" = true ]; then
        log_and_print "INFO" "DRY RUN: Would configure MongoDB with SSL/TLS"
        return 0
    fi
    
    # Backup existing config if it exists
    if [ -f /etc/mongod.conf ]; then
        cp /etc/mongod.conf "/etc/mongod.conf.backup.$(date +%F_%T)"
        log_and_print "INFO" "Backed up existing configuration"
    fi
    
    # Generate secure MongoDB configuration
    cat > /etc/mongod.conf << EOF
# MongoDB Configuration - Hardened for Maximum Security
# Generated by MongoDB Hardening Script v$SCRIPT_VERSION

# Storage settings
storage:
  dbPath: $DB_PATH
  journal:
    enabled: true
  engine: wiredTiger
  wiredTiger:
    engineConfig:
      cacheSizeGB: 1
      journalCompressor: snappy
      directoryForIndexes: false
    collectionConfig:
      blockCompressor: snappy
    indexConfig:
      prefixCompression: true

# Network settings
net:
  port: 27017
  bindIp: 127.0.0.1
  maxIncomingConnections: 1000
  ssl:
    mode: requireSSL
    PEMKeyFile: /etc/letsencrypt/live/$MONGO_DOMAIN/privkey.pem
    PEMKeyFilePassword: ""
    certificateSelector: "subject=CN=$MONGO_DOMAIN"
    CAFile: $CA_DIR/ca.pem
    allowConnectionsWithoutCertificates: false
    allowInvalidHostnames: false
    allowInvalidCertificates: false

# Process management
processManagement:
  fork: false
  pidFilePath: /var/run/mongodb/mongod.pid

# Logging
systemLog:
  destination: file
  logAppend: true
  path: $LOG_PATH
  verbosity: 0
  component:
    accessControl:
      verbosity: 1
    network:
      verbosity: 1

# Security settings
security:
  authorization: enabled
  clusterAuthMode: x509

# Operation profiling
operationProfiling:
  mode: slowOp
  slowOpThresholdMs: 100

# Replication settings (for future use)
#replication:
#  replSetName: "rs0"

EOF
    
    # Set proper permissions
    chmod 644 /etc/mongod.conf
    chown root:root /etc/mongod.conf
    
    log_and_print "FIXED" "Generated secure MongoDB configuration with SSL/TLS"
    log_and_print "EXPLAIN" "Configuration enforces SSL encryption, authentication, and secure storage"
    
    return 0  # Signal that config was changed
}

# =============================================================================
# Storage Engine Migration
# =============================================================================

# Check and migrate from mmapv1 to WiredTiger if needed
check_and_migrate_storage_engine() {
    log_and_print "INFO" "Checking storage engine..."
    
    local current_engine="unknown"
    if systemctl is-active --quiet mongod; then
        current_engine=$(timeout 10 mongo --quiet --eval "db.serverStatus().storageEngine.name" 2>/dev/null || echo "unknown")
    fi
    
    if [[ "$current_engine" == "mmapv1" ]]; then
        log_and_print "WARN" "Detected mmapv1 storage engine. Starting migration to WiredTiger..."
        log_and_print "EXPLAIN" "WiredTiger provides better security, performance, and data compression"
        log_and_print "EXPLAIN" "This migration preserves all data but requires temporary service downtime"
        
        if [ "${DRY_RUN:-false}" = true ]; then
            log_and_print "INFO" "DRY RUN: Would migrate storage engine from mmapv1 to WiredTiger"
            return 0
        fi
        
        # Create pre-migration backup
        local migration_backup="$BACKUP_PATH/pre-migration-$(date +%F_%T)"
        mkdir -p "$migration_backup"
        
        log_and_print "INFO" "Creating pre-migration backup..."
        if mongodump --out "$migration_backup" --quiet; then
            log_and_print "FIXED" "Pre-migration backup created"
        else
            log_and_print "ERROR" "Failed to create backup. Aborting migration."
            return 1
        fi
        
        # Stop MongoDB
        systemctl stop mongod
        
        # Move old data directory
        local old_data_dir="${DB_PATH}_mmapv1_backup_$(date +%F_%T)"
        mv "$DB_PATH" "$old_data_dir"
        mkdir -p "$DB_PATH"
        chown mongodb:mongodb "$DB_PATH"
        
        # The configuration will be updated to use WiredTiger
        log_and_print "INFO" "Starting MongoDB with WiredTiger storage engine..."
        
        # Start MongoDB (it will use WiredTiger by default now)
        systemctl start mongod
        
        # Wait for MongoDB to be ready
        local ready=false
        for i in {1..30}; do
            if mongo --eval "db.runCommand('ping')" &>/dev/null; then
                ready=true
                break
            fi
            sleep 2
        done
        
        if [ "$ready" = false ]; then
            log_and_print "ERROR" "MongoDB failed to start after migration"
            return 1
        fi
        
        # Restore data
        log_and_print "INFO" "Restoring data to WiredTiger storage engine..."
        if mongorestore "$migration_backup" --quiet; then
            log_and_print "FIXED" "Storage engine migration completed successfully"
            log_and_print "INFO" "Old mmapv1 data backed up to: $old_data_dir"
        else
            log_and_print "ERROR" "Failed to restore data after migration"
            return 1
        fi
        
    elif [[ "$current_engine" == "wiredTiger" ]]; then
        log_and_print "OK" "Already using secure WiredTiger storage engine"
    else
        log_and_print "INFO" "Storage engine: $current_engine (will be set to WiredTiger)"
    fi
}

# =============================================================================
# Service Management
# =============================================================================

# Ensure MongoDB service is running
ensure_mongodb_running() {
    log_and_print "INFO" "Managing MongoDB service..."
    
    local restart_needed=false
    local config_changed=$1
    
    if [ "${DRY_RUN:-false}" = true ]; then
        log_and_print "INFO" "DRY RUN: Would ensure MongoDB service is running"
        return 0
    fi
    
    if ! systemctl is-active --quiet mongod; then
        systemctl start mongod
        restart_needed=true
        log_and_print "FIXED" "Started MongoDB service"
    elif [ "$config_changed" = true ]; then
        systemctl restart mongod
        restart_needed=true
        log_and_print "FIXED" "Restarted MongoDB service to apply configuration changes"
    else
        log_and_print "OK" "MongoDB service is running"
    fi
    
    if [ "$restart_needed" = true ]; then
        # Wait for MongoDB to be ready
        log_and_print "INFO" "Waiting for MongoDB to be ready..."
        local ready=false
        for i in {1..30}; do
            if mongo --eval "db.runCommand('ping')" &>/dev/null; then
                log_and_print "OK" "MongoDB is ready"
                ready=true
                break
            fi
            sleep 2
        done
        
        if [ "$ready" = false ]; then
            log_and_print "ERROR" "MongoDB failed to start within 60 seconds"
            return 1
        fi
    fi
}

# =============================================================================
# Module Information
# =============================================================================

# Display MongoDB module information
mongodb_module_info() {
    echo "MongoDB Library Module - MongoDB management functions"
    echo "Provides: installation, configuration, service management, storage migration"
}